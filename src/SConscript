import glob

Import("env")

env.AppendUnique(CPPPATH=['../include'])
env.AppendUnique(CPPDEFINES=['FASTNOISE_EXPORT'])
env.AppendUnique(CPPSUFFIXES=['.inl'])

# FastSIMD files
fastsimd_headers = glob.glob('*.h', root_dir='../include/FastSIMD/')
fastsimd_include_inl = glob.glob('*.inl', root_dir='../include/FastSIMD/')
fastsimd_inl = glob.glob('*.inl', root_dir='FastSIMD/')
fastsimd_internal_headers = glob.glob('*.h', root_dir='FastSIMD/Internal/')
fastsimd_internal_inl = glob.glob('*.inl', root_dir='FastSIMD/Internal/')

fastsimd_internal_headers += fastsimd_internal_inl

fastsimd_headers = fastsimd_headers + fastsimd_inl + fastsimd_include_inl


from fastsimd_helpers import *
fastsimd_obj = []

if env['use_llvm']:
    env.AppendUnique(CPPFLAGS=['-std=c++17','-ffast-math','-fno-stack-protector'])
    fastsimd_obj = get_sources_non_msvc(env)
elif env['CC'] == 'cl':
    env.AppendUnique(CPPFLAGS=['/std:c++17','/GL-', '/GS-', '/fp:fast', '/wd4251'])
    fastsimd_obj = get_sources_cl_msvc(env)

# FastNoise files
fastnoise_headers = glob.glob('*.h', root_dir='../include/FastNoise/')
fastnoise_inl = glob.glob('*.inl', root_dir='../include/FastNoise/')
fastnoise_generators_headers = glob.glob('*.h', root_dir='../include/FastNoise/Generators/')
fastnoise_generators_inl = glob.glob('*.inl', root_dir='../include/FastNoise/Generators/')

fastnoise_headers = fastnoise_headers + fastnoise_inl
fastnoise_generators_headers += fastnoise_generators_inl
fastnoise_obj = [
    env.Object('FastNoise/Metadata.cpp'),
    env.Object('FastNoise/SmartNode.cpp'),
    env.Object('FastNoise/FastNoise_C.cpp'),
]

Library('FastNoise', fastsimd_obj + fastnoise_obj)